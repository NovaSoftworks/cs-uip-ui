name: 'Docker: build & push'
run-name: 'Docker: build & push - v${{ github.event.inputs.version }}'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'SemVer image version (e.g. 1.2.3)'
        required: false
        default: ''
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine version
        id: determine_version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            version="${{ github.event.inputs.version }}"
          else
            latest_tag=$(git fetch --tags >/dev/null 2>&1 && git tag --list 'v*' --sort=-v:refname | head -n1)
            if [[ -z "$latest_tag" ]]; then
              version="0.1.0"
            else
              base="${latest_tag#v}"
              major=$(echo "$base" | cut -d. -f1)
              minor=$(echo "$base" | cut -d. -f2)
              patch=$(echo "$base" | cut -d. -f3)
              version="$major.$minor.$((patch + 1))"
            fi
          fi
          echo "Resolved version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Validate version format
        run: |
          echo "${{ steps.determine_version.outputs.version }}" | grep -Eq '^([0-9]+\.){2}[0-9]+$' \
            || (echo "Invalid version. Must be in SemVer format (Major.minor.patch)" && exit 1)
      - name: Check if tag already exists
        run: |
          if git rev-parse "v${{ steps.determine_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.determine_version.outputs.version }} already exists."
            exit 1
          fi
      - name: Add version to job summary
        run: echo "## Docker Build v${{ steps.determine_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
      - name: Set Docker image tag
        id: set_image_tag
        run: echo "image_tag=ghcr.io/${GITHUB_REPOSITORY@L}:${{ steps.determine_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build  . --file Dockerfile --tag ${{ steps.set_image_tag.outputs.image_tag }}
          docker tag ${{ steps.set_image_tag.outputs.image_tag }} ghcr.io/${GITHUB_REPOSITORY@L}:latest

      - name: Save Docker image
        run: docker save ${{ steps.set_image_tag.outputs.image_tag }} ghcr.io/${GITHUB_REPOSITORY@L}:latest -o image.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker_image
          path: image.tar

      - name: Tag the commit
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.determine_version.outputs.version }}
          git push origin v${{ steps.determine_version.outputs.version }}

  push:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker_image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push ${{ needs.build.outputs.image_tag }}
          docker push ghcr.io/${GITHUB_REPOSITORY@L}:latest
